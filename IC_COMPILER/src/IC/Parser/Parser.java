
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 09 15:30:02 IST 2012
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import IC.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import IC.Parser.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 09 15:30:02 IST 2012
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\011\000\002\003\007" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\010\013\000\002\010\013\000\002\010\012\000\002\010" +
    "\012\000\002\013\005\000\002\013\003\000\002\013\002" +
    "\000\002\012\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\002\000\002\015" +
    "\006\000\002\015\004\000\002\015\005\000\002\015\004" +
    "\000\002\015\011\000\002\015\007\000\002\015\007\000" +
    "\002\015\004\000\002\015\004\000\002\015\005\000\002" +
    "\027\007\000\002\027\005\000\002\017\002\000\002\017" +
    "\005\000\002\017\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\006\000\002\016\007\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\004\000\002\025" +
    "\004\000\002\021\003\000\002\021\003\000\002\022\010" +
    "\000\002\023\010\000\002\023\006\000\002\020\003\000" +
    "\002\020\005\000\002\020\006\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\ufffe\007\ufffe\001\002\000\004\002" +
    "\266\001\002\000\006\002\001\007\007\001\002\000\006" +
    "\002\uffff\007\uffff\001\002\000\004\061\010\001\002\000" +
    "\006\016\011\026\012\001\002\000\004\061\262\001\002" +
    "\000\020\005\ufff9\023\ufff9\045\ufff9\051\ufff9\052\ufff9\056" +
    "\ufff9\061\ufff9\001\002\000\020\005\017\023\015\045\024" +
    "\051\016\052\023\056\020\061\022\001\002\000\020\005" +
    "\ufffa\023\ufffa\045\ufffa\051\ufffa\052\ufffa\056\ufffa\061\ufffa" +
    "\001\002\000\006\025\uffed\062\uffed\001\002\000\014\005" +
    "\017\023\015\052\023\056\243\061\022\001\002\000\006" +
    "\025\uffec\062\uffec\001\002\000\004\062\233\001\002\000" +
    "\020\005\ufffb\023\ufffb\045\ufffb\051\ufffb\052\ufffb\056\ufffb" +
    "\061\ufffb\001\002\000\006\025\uffea\062\uffea\001\002\000" +
    "\006\025\uffeb\062\uffeb\001\002\000\006\002\ufffc\007\ufffc" +
    "\001\002\000\006\025\030\062\026\001\002\000\010\010" +
    "\ufff7\032\035\050\ufff7\001\002\000\006\010\032\050\033" +
    "\001\002\000\004\044\031\001\002\000\006\025\uffe9\062" +
    "\uffe9\001\002\000\004\062\034\001\002\000\020\005\ufff8" +
    "\023\ufff8\045\ufff8\051\ufff8\052\ufff8\056\ufff8\061\ufff8\001" +
    "\002\000\006\010\ufff6\050\ufff6\001\002\000\016\005\017" +
    "\010\uffef\023\015\047\uffef\052\023\061\022\001\002\000" +
    "\006\010\042\047\043\001\002\000\006\025\030\062\041" +
    "\001\002\000\006\010\ufff0\047\ufff0\001\002\000\006\010" +
    "\uffee\047\uffee\001\002\000\012\005\017\023\015\052\023" +
    "\061\022\001\002\000\004\026\044\001\002\000\056\005" +
    "\uffe6\006\uffe6\011\uffe6\017\uffe6\022\uffe6\023\uffe6\026\uffe6" +
    "\030\uffe6\032\uffe6\035\uffe6\041\uffe6\042\uffe6\045\uffe6\046" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\001\002\000\056\005\017\006\070\011" +
    "\047\017\072\022\061\023\015\026\050\030\064\032\052" +
    "\035\071\041\075\042\101\045\103\046\055\052\023\053" +
    "\063\054\057\057\053\060\076\061\100\062\062\063\066" +
    "\001\002\000\042\004\227\012\uffd6\013\uffd6\015\uffd6\020" +
    "\uffd6\021\uffd6\024\uffd6\025\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\001\002\000" +
    "\004\050\226\001\002\000\056\005\uffe6\006\uffe6\011\uffe6" +
    "\017\uffe6\022\uffe6\023\uffe6\026\uffe6\030\uffe6\032\uffe6\035" +
    "\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001" +
    "\002\000\040\012\120\013\132\015\126\020\133\021\121" +
    "\024\122\025\134\031\130\033\135\034\124\035\117\036" +
    "\125\037\123\040\127\043\131\001\002\000\032\017\072" +
    "\030\064\032\052\035\071\041\075\042\101\053\063\054" +
    "\057\060\076\061\113\062\062\063\066\001\002\000\004" +
    "\032\216\001\002\000\006\025\030\062\211\001\002\000" +
    "\034\017\072\030\064\032\052\035\071\041\075\042\101" +
    "\050\207\053\063\054\057\060\076\061\113\062\062\063" +
    "\066\001\002\000\050\010\uffbc\012\uffbc\013\uffbc\015\uffbc" +
    "\020\uffbc\021\uffbc\024\uffbc\025\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc\044\uffbc" +
    "\047\uffbc\050\uffbc\001\002\000\050\010\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\043" +
    "\uffb3\044\uffb3\047\uffb3\050\uffb3\001\002\000\050\010\uffbd" +
    "\012\uffbd\013\uffbd\015\uffbd\020\uffbd\021\uffbd\024\uffbd\025" +
    "\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\044\uffbd\047\uffbd\050\uffbd\001\002\000" +
    "\004\032\200\001\002\000\054\004\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\015\uffb8\020\uffb8\021\uffb8\024\uffb8\025\uffb8\031" +
    "\uffb8\032\175\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\043\uffb8\044\uffb8\047\uffb8\050\uffb8\001\002\000" +
    "\050\010\uffd4\012\uffd4\013\uffd4\015\uffd4\020\uffd4\021\uffd4" +
    "\024\uffd4\025\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\032\017\072\030\064\032\052\035\071\041" +
    "\075\042\101\053\063\054\057\060\076\061\113\062\062" +
    "\063\066\001\002\000\056\005\uffe7\006\uffe7\011\uffe7\017" +
    "\uffe7\022\uffe7\023\uffe7\026\uffe7\030\uffe7\032\uffe7\035\uffe7" +
    "\041\uffe7\042\uffe7\045\uffe7\046\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002" +
    "\000\050\010\uffb4\012\uffb4\013\uffb4\015\uffb4\020\uffb4\021" +
    "\uffb4\024\uffb4\025\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\043\uffb4\044\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\050\010\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\020\uffcf\021\uffcf\024\uffcf\025\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\044\uffcf" +
    "\047\uffcf\050\uffcf\001\002\000\004\050\173\001\002\000" +
    "\032\017\072\030\064\032\052\035\071\041\075\042\101" +
    "\053\063\054\057\060\076\061\113\062\062\063\066\001" +
    "\002\000\050\010\uffb2\012\uffb2\013\uffb2\015\uffb2\020\uffb2" +
    "\021\uffb2\024\uffb2\025\uffb2\031\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2\047\uffb2" +
    "\050\uffb2\001\002\000\050\010\uffce\012\uffce\013\uffce\015" +
    "\uffce\020\uffce\021\uffce\024\uffce\025\uffce\031\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\043\uffce\044" +
    "\uffce\047\uffce\050\uffce\001\002\000\050\010\uffd0\012\uffd0" +
    "\013\uffd0\015\uffd0\020\uffd0\021\uffd0\024\uffd0\025\uffd0\031" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\043\uffd0\044\uffd0\047\uffd0\050\uffd0\001\002\000\012\005" +
    "\017\023\015\052\023\061\164\001\002\000\050\010\uffb5" +
    "\012\uffb5\013\uffb5\015\uffb5\020\uffb5\021\uffb5\024\uffb5\025" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\043\uffb5\044\uffb5\047\uffb5\050\uffb5\001\002\000" +
    "\042\012\uffd5\013\uffd5\015\uffd5\020\uffd5\021\uffd5\024\uffd5" +
    "\025\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\043\uffd5\050\162\001\002\000\010\013\104" +
    "\025\uffea\062\uffea\001\002\000\050\010\uffb1\012\uffb1\013" +
    "\uffb1\015\uffb1\020\uffb1\021\uffb1\024\uffb1\025\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\043" +
    "\uffb1\044\uffb1\047\uffb1\050\uffb1\001\002\000\056\005\uffe8" +
    "\006\uffe8\011\uffe8\017\uffe8\022\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\032\uffe8\035\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\001\002\000\020\005\ufff3\023\ufff3\045\ufff3" +
    "\051\ufff3\052\ufff3\056\ufff3\061\ufff3\001\002\000\004\062" +
    "\105\001\002\000\004\032\106\001\002\000\036\010\uffd9" +
    "\017\072\030\064\032\052\035\071\041\075\042\101\047" +
    "\uffd9\053\063\054\057\060\076\061\113\062\062\063\066" +
    "\001\002\000\050\010\uffd6\012\uffd6\013\uffd6\015\uffd6\020" +
    "\uffd6\021\uffd6\024\uffd6\025\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\044\uffd6\047" +
    "\uffd6\050\uffd6\001\002\000\044\010\uffd7\012\120\013\132" +
    "\015\126\020\133\021\121\024\122\025\134\031\130\033" +
    "\135\034\124\035\117\036\125\037\123\040\127\043\131" +
    "\047\uffd7\001\002\000\006\010\114\047\115\001\002\000" +
    "\050\010\uffd5\012\uffd5\013\uffd5\015\uffd5\020\uffd5\021\uffd5" +
    "\024\uffd5\025\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\047\uffd5\050\uffd5" +
    "\001\002\000\004\013\104\001\002\000\032\017\072\030" +
    "\064\032\052\035\071\041\075\042\101\053\063\054\057" +
    "\060\076\061\113\062\062\063\066\001\002\000\050\010" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\020\uffbb\021\uffbb\024\uffbb" +
    "\025\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\043\uffbb\044\uffbb\047\uffbb\050\uffbb\001\002" +
    "\000\044\010\uffd8\012\120\013\132\015\126\020\133\021" +
    "\121\024\122\025\134\031\130\033\135\034\124\035\117" +
    "\036\125\037\123\040\127\043\131\047\uffd8\001\002\000" +
    "\032\017\072\030\064\032\052\035\071\041\075\042\101" +
    "\053\063\054\057\060\076\061\113\062\062\063\066\001" +
    "\002\000\032\017\072\030\064\032\052\035\071\041\075" +
    "\042\101\053\063\054\057\060\076\061\113\062\062\063" +
    "\066\001\002\000\032\017\072\030\064\032\052\035\071" +
    "\041\075\042\101\053\063\054\057\060\076\061\113\062" +
    "\062\063\066\001\002\000\032\017\072\030\064\032\052" +
    "\035\071\041\075\042\101\053\063\054\057\060\076\061" +
    "\113\062\062\063\066\001\002\000\032\017\072\030\064" +
    "\032\052\035\071\041\075\042\101\053\063\054\057\060" +
    "\076\061\113\062\062\063\066\001\002\000\032\017\072" +
    "\030\064\032\052\035\071\041\075\042\101\053\063\054" +
    "\057\060\076\061\113\062\062\063\066\001\002\000\032" +
    "\017\072\030\064\032\052\035\071\041\075\042\101\053" +
    "\063\054\057\060\076\061\113\062\062\063\066\001\002" +
    "\000\032\017\072\030\064\032\052\035\071\041\075\042" +
    "\101\053\063\054\057\060\076\061\113\062\062\063\066" +
    "\001\002\000\032\017\072\030\064\032\052\035\071\041" +
    "\075\042\101\053\063\054\057\060\076\061\113\062\062" +
    "\063\066\001\002\000\032\017\072\030\064\032\052\035" +
    "\071\041\075\042\101\053\063\054\057\060\076\061\113" +
    "\062\062\063\066\001\002\000\032\017\072\030\064\032" +
    "\052\035\071\041\075\042\101\053\063\054\057\060\076" +
    "\061\113\062\062\063\066\001\002\000\006\027\143\062" +
    "\142\001\002\000\032\017\072\030\064\032\052\035\071" +
    "\041\075\042\101\053\063\054\057\060\076\061\113\062" +
    "\062\063\066\001\002\000\032\017\072\030\064\032\052" +
    "\035\071\041\075\042\101\053\063\054\057\060\076\061" +
    "\113\062\062\063\066\001\002\000\032\017\072\030\064" +
    "\032\052\035\071\041\075\042\101\053\063\054\057\060" +
    "\076\061\113\062\062\063\066\001\002\000\050\010\uffc5" +
    "\012\120\013\132\015\uffc5\020\uffc5\021\uffc5\024\uffc5\025" +
    "\134\031\uffc5\033\uffc5\034\uffc5\035\117\036\125\037\123" +
    "\040\uffc5\043\131\044\uffc5\047\uffc5\050\uffc5\001\002\000" +
    "\042\012\120\013\132\015\126\020\133\021\121\024\122" +
    "\025\134\031\130\033\135\034\124\035\117\036\125\037" +
    "\123\040\127\043\131\044\140\001\002\000\052\004\uffb6" +
    "\010\uffb6\012\uffb6\013\uffb6\015\uffb6\020\uffb6\021\uffb6\024" +
    "\uffb6\025\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6\001" +
    "\002\000\050\010\uffc3\012\120\013\132\015\uffc3\020\uffc3" +
    "\021\uffc3\024\uffc3\025\134\031\uffc3\033\uffc3\034\uffc3\035" +
    "\117\036\125\037\123\040\uffc3\043\131\044\uffc3\047\uffc3" +
    "\050\uffc3\001\002\000\054\004\uffb7\010\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\020\uffb7\021\uffb7\024\uffb7\025\uffb7\031\uffb7" +
    "\032\144\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\001\002\000\050" +
    "\010\uffd1\012\uffd1\013\uffd1\015\uffd1\020\uffd1\021\uffd1\024" +
    "\uffd1\025\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\036\010\uffd9\017\072\030\064\032\052\035\071" +
    "\041\075\042\101\047\uffd9\053\063\054\057\060\076\061" +
    "\113\062\062\063\066\001\002\000\006\010\114\047\146" +
    "\001\002\000\050\010\uffba\012\uffba\013\uffba\015\uffba\020" +
    "\uffba\021\uffba\024\uffba\025\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\043\uffba\044\uffba\047" +
    "\uffba\050\uffba\001\002\000\050\010\uffcc\012\120\013\132" +
    "\015\uffcc\020\uffcc\021\uffcc\024\uffcc\025\134\031\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\125\037\123\040\uffcc\043\uffcc" +
    "\044\uffcc\047\uffcc\050\uffcc\001\002\000\050\010\uffc6\012" +
    "\120\013\132\015\126\020\133\021\121\024\122\025\134" +
    "\031\uffc6\033\135\034\124\035\117\036\125\037\123\040" +
    "\127\043\131\044\uffc6\047\uffc6\050\uffc6\001\002\000\050" +
    "\010\uffc0\012\120\013\132\015\uffc0\020\133\021\121\024" +
    "\uffc0\025\134\031\uffc0\033\135\034\124\035\117\036\125" +
    "\037\123\040\uffc0\043\131\044\uffc0\047\uffc0\050\uffc0\001" +
    "\002\000\050\010\uffc1\012\120\013\132\015\uffc1\020\133" +
    "\021\121\024\uffc1\025\134\031\uffc1\033\135\034\124\035" +
    "\117\036\125\037\123\040\uffc1\043\131\044\uffc1\047\uffc1" +
    "\050\uffc1\001\002\000\050\010\uffc8\012\uffc8\013\132\015" +
    "\uffc8\020\uffc8\021\uffc8\024\uffc8\025\134\031\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8\044" +
    "\uffc8\047\uffc8\050\uffc8\001\002\000\050\010\uffc4\012\120" +
    "\013\132\015\uffc4\020\uffc4\021\uffc4\024\uffc4\025\134\031" +
    "\uffc4\033\uffc4\034\uffc4\035\117\036\125\037\123\040\uffc4" +
    "\043\131\044\uffc4\047\uffc4\050\uffc4\001\002\000\050\010" +
    "\uffca\012\uffca\013\132\015\uffca\020\uffca\021\uffca\024\uffca" +
    "\025\134\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\043\uffca\044\uffca\047\uffca\050\uffca\001\002" +
    "\000\050\010\uffc7\012\120\013\132\015\126\020\133\021" +
    "\121\024\uffc7\025\134\031\uffc7\033\135\034\124\035\117" +
    "\036\125\037\123\040\127\043\131\044\uffc7\047\uffc7\050" +
    "\uffc7\001\002\000\050\010\uffc2\012\120\013\132\015\uffc2" +
    "\020\uffc2\021\uffc2\024\uffc2\025\134\031\uffc2\033\uffc2\034" +
    "\uffc2\035\117\036\125\037\123\040\uffc2\043\131\044\uffc2" +
    "\047\uffc2\050\uffc2\001\002\000\050\010\uffc9\012\uffc9\013" +
    "\132\015\uffc9\020\uffc9\021\uffc9\024\uffc9\025\134\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\043" +
    "\uffc9\044\uffc9\047\uffc9\050\uffc9\001\002\000\050\010\uffcb" +
    "\012\120\013\132\015\uffcb\020\uffcb\021\uffcb\024\uffcb\025" +
    "\134\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\125\037\123" +
    "\040\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\001\002\000" +
    "\060\005\uffe4\006\uffe4\011\uffe4\014\uffe4\017\uffe4\022\uffe4" +
    "\023\uffe4\026\uffe4\030\uffe4\032\uffe4\035\uffe4\041\uffe4\042" +
    "\uffe4\045\uffe4\046\uffe4\052\uffe4\053\uffe4\054\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002\000\004\025" +
    "\167\001\002\000\006\025\uffea\032\165\001\002\000\004" +
    "\047\166\001\002\000\050\010\uffd3\012\uffd3\013\uffd3\015" +
    "\uffd3\020\uffd3\021\uffd3\024\uffd3\025\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\044" +
    "\uffd3\047\uffd3\050\uffd3\001\002\000\034\017\072\030\064" +
    "\032\052\035\071\041\075\042\101\044\031\053\063\054" +
    "\057\060\076\061\113\062\062\063\066\001\002\000\042" +
    "\012\120\013\132\015\126\020\133\021\121\024\122\025" +
    "\134\031\130\033\135\034\124\035\117\036\125\037\123" +
    "\040\127\043\131\044\171\001\002\000\050\010\uffd2\012" +
    "\uffd2\013\uffd2\015\uffd2\020\uffd2\021\uffd2\024\uffd2\025\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\043\uffd2\044\uffd2\047\uffd2\050\uffd2\001\002\000\050" +
    "\010\uffbf\012\uffbf\013\132\015\uffbf\020\uffbf\021\uffbf\024" +
    "\uffbf\025\134\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\043\uffbf\044\uffbf\047\uffbf\050\uffbf\001" +
    "\002\000\060\005\uffde\006\uffde\011\uffde\014\uffde\017\uffde" +
    "\022\uffde\023\uffde\026\uffde\030\uffde\032\uffde\035\uffde\041" +
    "\uffde\042\uffde\045\uffde\046\uffde\052\uffde\053\uffde\054\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\001\002\000" +
    "\050\010\uffbe\012\uffbe\013\132\015\uffbe\020\uffbe\021\uffbe" +
    "\024\uffbe\025\134\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe" +
    "\001\002\000\036\010\uffd9\017\072\030\064\032\052\035" +
    "\071\041\075\042\101\047\uffd9\053\063\054\057\060\076" +
    "\061\113\062\062\063\066\001\002\000\006\010\114\047" +
    "\177\001\002\000\050\010\uffb9\012\uffb9\013\uffb9\015\uffb9" +
    "\020\uffb9\021\uffb9\024\uffb9\025\uffb9\031\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\043\uffb9\044\uffb9" +
    "\047\uffb9\050\uffb9\001\002\000\032\017\072\030\064\032" +
    "\052\035\071\041\075\042\101\053\063\054\057\060\076" +
    "\061\113\062\062\063\066\001\002\000\042\012\120\013" +
    "\132\015\126\020\133\021\121\024\122\025\134\031\130" +
    "\033\135\034\124\035\117\036\125\037\123\040\127\043" +
    "\131\047\202\001\002\000\046\006\070\011\047\017\072" +
    "\022\061\026\050\030\064\032\052\035\071\041\075\042" +
    "\101\046\055\053\063\054\057\057\053\060\076\061\113" +
    "\062\062\063\066\001\002\000\060\005\uffe0\006\uffe0\011" +
    "\uffe0\014\204\017\uffe0\022\uffe0\023\uffe0\026\uffe0\030\uffe0" +
    "\032\uffe0\035\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\001\002\000\046\006\070\011\047\017\072\022" +
    "\061\026\050\030\064\032\052\035\071\041\075\042\101" +
    "\046\055\053\063\054\057\057\053\060\076\061\113\062" +
    "\062\063\066\001\002\000\060\005\uffe1\006\uffe1\011\uffe1" +
    "\014\uffe1\017\uffe1\022\uffe1\023\uffe1\026\uffe1\030\uffe1\032" +
    "\uffe1\035\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\001\002\000\042\012\120\013\132\015\126\020\133" +
    "\021\121\024\122\025\134\031\130\033\135\034\124\035" +
    "\117\036\125\037\123\040\127\043\131\050\210\001\002" +
    "\000\060\005\uffe2\006\uffe2\011\uffe2\014\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\026\uffe2\030\uffe2\032\uffe2\035\uffe2\041\uffe2" +
    "\042\uffe2\045\uffe2\046\uffe2\052\uffe2\053\uffe2\054\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002\000\060" +
    "\005\uffe3\006\uffe3\011\uffe3\014\uffe3\017\uffe3\022\uffe3\023" +
    "\uffe3\026\uffe3\030\uffe3\032\uffe3\035\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\046\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\006\004\213" +
    "\050\212\001\002\000\056\005\uffda\006\uffda\011\uffda\017" +
    "\uffda\022\uffda\023\uffda\026\uffda\030\uffda\032\uffda\035\uffda" +
    "\041\uffda\042\uffda\045\uffda\046\uffda\052\uffda\053\uffda\054" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\001\002" +
    "\000\032\017\072\030\064\032\052\035\071\041\075\042" +
    "\101\053\063\054\057\060\076\061\113\062\062\063\066" +
    "\001\002\000\042\012\120\013\132\015\126\020\133\021" +
    "\121\024\122\025\134\031\130\033\135\034\124\035\117" +
    "\036\125\037\123\040\127\043\131\050\215\001\002\000" +
    "\056\005\uffdb\006\uffdb\011\uffdb\017\uffdb\022\uffdb\023\uffdb" +
    "\026\uffdb\030\uffdb\032\uffdb\035\uffdb\041\uffdb\042\uffdb\045" +
    "\uffdb\046\uffdb\052\uffdb\053\uffdb\054\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\001\002\000\032\017\072\030" +
    "\064\032\052\035\071\041\075\042\101\053\063\054\057" +
    "\060\076\061\113\062\062\063\066\001\002\000\042\012" +
    "\120\013\132\015\126\020\133\021\121\024\122\025\134" +
    "\031\130\033\135\034\124\035\117\036\125\037\123\040" +
    "\127\043\131\047\220\001\002\000\046\006\070\011\047" +
    "\017\072\022\061\026\050\030\064\032\052\035\071\041" +
    "\075\042\101\046\055\053\063\054\057\057\053\060\076" +
    "\061\113\062\062\063\066\001\002\000\060\005\uffdf\006" +
    "\uffdf\011\uffdf\014\uffdf\017\uffdf\022\uffdf\023\uffdf\026\uffdf" +
    "\030\uffdf\032\uffdf\035\uffdf\041\uffdf\042\uffdf\045\uffdf\046" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\001\002\000\042\012\120\013\132\015" +
    "\126\020\133\021\121\024\122\025\134\031\130\033\135" +
    "\034\124\035\117\036\125\037\123\040\127\043\131\047" +
    "\223\001\002\000\050\010\uffcd\012\uffcd\013\uffcd\015\uffcd" +
    "\020\uffcd\021\uffcd\024\uffcd\025\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\044\uffcd" +
    "\047\uffcd\050\uffcd\001\002\000\056\005\017\006\070\011" +
    "\047\017\072\022\061\023\015\026\050\030\064\032\052" +
    "\035\071\041\075\042\101\045\225\046\055\052\023\053" +
    "\063\054\057\057\053\060\076\061\100\062\062\063\066" +
    "\001\002\000\060\005\uffdc\006\uffdc\011\uffdc\014\uffdc\017" +
    "\uffdc\022\uffdc\023\uffdc\026\uffdc\030\uffdc\032\uffdc\035\uffdc" +
    "\041\uffdc\042\uffdc\045\uffdc\046\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002" +
    "\000\060\005\uffdd\006\uffdd\011\uffdd\014\uffdd\017\uffdd\022" +
    "\uffdd\023\uffdd\026\uffdd\030\uffdd\032\uffdd\035\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\052\uffdd\053\uffdd\054\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\032" +
    "\017\072\030\064\032\052\035\071\041\075\042\101\053" +
    "\063\054\057\060\076\061\113\062\062\063\066\001\002" +
    "\000\042\012\120\013\132\015\126\020\133\021\121\024" +
    "\122\025\134\031\130\033\135\034\124\035\117\036\125" +
    "\037\123\040\127\043\131\050\231\001\002\000\060\005" +
    "\uffe5\006\uffe5\011\uffe5\014\uffe5\017\uffe5\022\uffe5\023\uffe5" +
    "\026\uffe5\030\uffe5\032\uffe5\035\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\046\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\001\002\000\006\010\ufff1\047" +
    "\ufff1\001\002\000\004\032\234\001\002\000\016\005\017" +
    "\010\uffef\023\015\047\uffef\052\023\061\022\001\002\000" +
    "\006\010\042\047\236\001\002\000\004\026\237\001\002" +
    "\000\056\005\uffe6\006\uffe6\011\uffe6\017\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\030\uffe6\032\uffe6\035\uffe6\041\uffe6\042\uffe6" +
    "\045\uffe6\046\uffe6\052\uffe6\053\uffe6\054\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\056\005\017" +
    "\006\070\011\047\017\072\022\061\023\015\026\050\030" +
    "\064\032\052\035\071\041\075\042\101\045\241\046\055" +
    "\052\023\053\063\054\057\057\053\060\076\061\100\062" +
    "\062\063\066\001\002\000\020\005\ufff2\023\ufff2\045\ufff2" +
    "\051\ufff2\052\ufff2\056\ufff2\061\ufff2\001\002\000\006\025" +
    "\030\062\253\001\002\000\004\062\244\001\002\000\004" +
    "\032\245\001\002\000\016\005\017\010\uffef\023\015\047" +
    "\uffef\052\023\061\022\001\002\000\006\010\042\047\247" +
    "\001\002\000\004\026\250\001\002\000\056\005\uffe6\006" +
    "\uffe6\011\uffe6\017\uffe6\022\uffe6\023\uffe6\026\uffe6\030\uffe6" +
    "\032\uffe6\035\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\001\002\000\056\005\017\006\070\011\047\017" +
    "\072\022\061\023\015\026\050\030\064\032\052\035\071" +
    "\041\075\042\101\045\252\046\055\052\023\053\063\054" +
    "\057\057\053\060\076\061\100\062\062\063\066\001\002" +
    "\000\020\005\ufff4\023\ufff4\045\ufff4\051\ufff4\052\ufff4\056" +
    "\ufff4\061\ufff4\001\002\000\004\032\254\001\002\000\016" +
    "\005\017\010\uffef\023\015\047\uffef\052\023\061\022\001" +
    "\002\000\006\010\042\047\256\001\002\000\004\026\257" +
    "\001\002\000\056\005\uffe6\006\uffe6\011\uffe6\017\uffe6\022" +
    "\uffe6\023\uffe6\026\uffe6\030\uffe6\032\uffe6\035\uffe6\041\uffe6" +
    "\042\uffe6\045\uffe6\046\uffe6\052\uffe6\053\uffe6\054\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\056" +
    "\005\017\006\070\011\047\017\072\022\061\023\015\026" +
    "\050\030\064\032\052\035\071\041\075\042\101\045\261" +
    "\046\055\052\023\053\063\054\057\057\053\060\076\061" +
    "\100\062\062\063\066\001\002\000\020\005\ufff5\023\ufff5" +
    "\045\ufff5\051\ufff5\052\ufff5\056\ufff5\061\ufff5\001\002\000" +
    "\004\026\263\001\002\000\020\005\ufff9\023\ufff9\045\ufff9" +
    "\051\ufff9\052\ufff9\056\ufff9\061\ufff9\001\002\000\020\005" +
    "\017\023\015\045\265\051\016\052\023\056\020\061\022" +
    "\001\002\000\006\002\ufffd\007\ufffd\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\004\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\012\001\001\000\010\006\020\010\013\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\037\013\035" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\231\014\036" +
    "\001\001\000\002\001\001\000\004\011\044\001\001\000" +
    "\030\014\053\015\101\016\050\020\045\021\076\022\057" +
    "\023\055\024\073\025\066\026\072\027\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\223\001\001" +
    "\000\002\001\001\000\022\016\221\020\106\021\111\022" +
    "\057\023\055\024\073\025\066\026\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\205\020\106\021" +
    "\111\022\057\023\055\024\073\025\066\026\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\173\020\106\021\111\022\057\023\055\024\073\025" +
    "\066\026\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\171\020" +
    "\106\021\111\022\057\023\055\024\073\025\066\026\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\107\017\110\020\106\021\111\022\057\023" +
    "\055\024\073\025\066\026\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\115\020\106\021\111\022\057" +
    "\023\055\024\073\025\066\026\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\160\020\106\021\111" +
    "\022\057\023\055\024\073\025\066\026\072\001\001\000" +
    "\022\016\157\020\106\021\111\022\057\023\055\024\073" +
    "\025\066\026\072\001\001\000\022\016\156\020\106\021" +
    "\111\022\057\023\055\024\073\025\066\026\072\001\001" +
    "\000\022\016\155\020\106\021\111\022\057\023\055\024" +
    "\073\025\066\026\072\001\001\000\022\016\154\020\106" +
    "\021\111\022\057\023\055\024\073\025\066\026\072\001" +
    "\001\000\022\016\153\020\106\021\111\022\057\023\055" +
    "\024\073\025\066\026\072\001\001\000\022\016\152\020" +
    "\106\021\111\022\057\023\055\024\073\025\066\026\072" +
    "\001\001\000\022\016\151\020\106\021\111\022\057\023" +
    "\055\024\073\025\066\026\072\001\001\000\022\016\150" +
    "\020\106\021\111\022\057\023\055\024\073\025\066\026" +
    "\072\001\001\000\022\016\147\020\106\021\111\022\057" +
    "\023\055\024\073\025\066\026\072\001\001\000\022\016" +
    "\146\020\106\021\111\022\057\023\055\024\073\025\066" +
    "\026\072\001\001\000\002\001\001\000\022\016\140\020" +
    "\106\021\111\022\057\023\055\024\073\025\066\026\072" +
    "\001\001\000\022\016\136\020\106\021\111\022\057\023" +
    "\055\024\073\025\066\026\072\001\001\000\022\016\135" +
    "\020\106\021\111\022\057\023\055\024\073\025\066\026" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\107\017\144\020\106\021\111\022\057" +
    "\023\055\024\073\025\066\026\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\167\020\106\021\111\022" +
    "\057\023\055\024\073\025\066\026\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\016\107\017\175\020\106" +
    "\021\111\022\057\023\055\024\073\025\066\026\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\200" +
    "\020\106\021\111\022\057\023\055\024\073\025\066\026" +
    "\072\001\001\000\002\001\001\000\024\015\202\016\050" +
    "\020\045\021\076\022\057\023\055\024\073\025\066\026" +
    "\072\001\001\000\002\001\001\000\024\015\204\016\050" +
    "\020\045\021\076\022\057\023\055\024\073\025\066\026" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\213\020\106\021\111\022\057\023\055" +
    "\024\073\025\066\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\216\020\106\021\111\022\057" +
    "\023\055\024\073\025\066\026\072\001\001\000\002\001" +
    "\001\000\024\015\220\016\050\020\045\021\076\022\057" +
    "\023\055\024\073\025\066\026\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\053" +
    "\015\101\016\050\020\045\021\076\022\057\023\055\024" +
    "\073\025\066\026\072\027\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\227\020\106\021\111\022" +
    "\057\023\055\024\073\025\066\026\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\037\013\234\014\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\237\001\001\000" +
    "\030\014\053\015\101\016\050\020\045\021\076\022\057" +
    "\023\055\024\073\025\066\026\072\027\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\037\013\245\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\250\001\001" +
    "\000\030\014\053\015\101\016\050\020\045\021\076\022" +
    "\057\023\055\024\073\025\066\026\072\027\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\037\013" +
    "\254\014\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\257\001\001\000\030\014\053\015\101\016" +
    "\050\020\045\021\076\022\057\023\055\024\073\025\066" +
    "\026\072\027\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\263\001\001\000\010\006\020\010\013" +
    "\014\024\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (true)
		System.out.println(t.getLine() + ":" + t + " " + t.value);
	return t; 

    }

	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	} 
	
	public int getCurrentLine() {
		return this.lexer.getCurrentLine();
	}

	
	
	// override method: syntax_error
	public void unrecovered_syntax_error(Symbol curr_tok) throws SyntaxError{
		throw new SyntaxError((Token) curr_tok);
	}
	
	// override method to avoid duplicate errors
	public void syntax_error(Symbol curr_tok){}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= NULL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new Literal(rleft, LiteralTypes.NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= FALSE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new Literal(bleft, LiteralTypes.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= TRUE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new Literal(bleft, LiteralTypes.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= QUOTE 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Literal(sleft, LiteralTypes.STRING, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  long num_val = Long.parseLong(n);
				if (num_val > 2147483648L){
					throw new SyntaxError(nleft, "Integer literal out of range: " + n);
				}
				RESULT = new Literal(nleft, LiteralTypes.INTEGER, (int)num_val); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // location ::= expr LB expr RB 
            {
              Location RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation(arr, index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // location ::= expr DOT ID 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(eleft, e, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // location ::= ID 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(idleft, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // virtualCall ::= ID LP exprList RP 
            {
              VirtualCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(idleft, id, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // virtualCall ::= expr DOT ID LP exprList RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(eleft, e, id, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // staticCall ::= CLASS_ID DOT ID LP exprList RP 
            {
              StaticCall RESULT =null;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticCall(classIdleft, classId, id, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("staticCall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // call ::= virtualCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VirtualCall c = (VirtualCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // call ::= staticCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StaticCall c = (StaticCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unExpr ::= LNEG expr 
            {
              UnaryOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(UnaryOps.LNEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unExpr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unExpr ::= MINUS expr 
            {
              UnaryOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(UnaryOps.UMINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unExpr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binExpr ::= expr NEQUAL expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binExpr ::= expr EQUAL expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binExpr ::= expr GTE expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binExpr ::= expr GT expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binExpr ::= expr LTE expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binExpr ::= expr LT expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binExpr ::= expr LOR expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binExpr ::= expr LAND expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binExpr ::= expr MOD expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binExpr ::= expr DIVIDE expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binExpr ::= expr MULTIPLY expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binExpr ::= expr MINUS expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binExpr ::= expr PLUS expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LP expr RP 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= unExpr 
            {
              Expression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryOp ue = (UnaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= binExpr 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryOp be = (BinaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = be; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NEW type LB expr RB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass(nleft, classId); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprList ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expression> el = new LinkedList<Expression>();
				   el.add(e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprList ::= exprList COMMA expr 
            {
              List<Expression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprList ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varDecl ::= type ID SEMI 
            {
              LocalVariable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new LocalVariable(t, id);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varDecl ::= type ID ASSIGN expr SEMI 
            {
              LocalVariable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new LocalVariable(t, id, e); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LCBR stmtList RCBR 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new StatementsBlock(lbleft,sl);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new Continue(cleft);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= BREAK SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new Break(bleft);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LP expr RP stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new While(e,st);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LP expr RP stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new If(e, st);
	 	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s_elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s_elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s_else = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		 	RESULT = new If(e, st, s_else);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new Return(rleft);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT= new Return(rleft,e);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= call SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		 	RESULT = new CallStatement(c);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= location ASSIGN expr SEMI 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	     	RESULT = new Assignment(l,e);
	     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtList ::= 
            {
              List<Statement> RESULT =null;
		
		      		RESULT = new LinkedList<Statement>();
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtList ::= stmtList varDecl 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LocalVariable v = (LocalVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		      		sl.add(v);
		      		RESULT = sl;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= stmtList stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		     	 	sl.add(s);
					RESULT = sl;
		      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		 		t.incrementDimension();
				RESULT=t;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new UserType(c_nameleft, c_name);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= STRING 
            {
              Type RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(strleft,DataTypes.STRING); 
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(boolleft,DataTypes.BOOLEAN);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(ileft,DataTypes.INT);
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int formal_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formal_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String formal_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT=new Formal(t,formal_name);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalList ::= 
            {
              List<Formal> RESULT =null;
		
			   RESULT = new LinkedList<Formal>();
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalList ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   List<Formal> fl=new LinkedList<Formal>();
			   fl.add(f);
			   RESULT = fl;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalList ::= formalList COMMA formal 
            {
              List<Formal> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   fl.add(f);
			   RESULT = fl;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=new VirtualMethod(new PrimitiveType(vleft, DataTypes.VOID), met_name, fl, sl);
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT=new VirtualMethod(t, met_name, fl, sl);
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= STATIC VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT= new StaticMethod(new PrimitiveType(stleft, DataTypes.VOID) ,met_name, fl, sl);
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= STATIC type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT= new StaticMethod(t, met_name, fl, sl);
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idList ::= idList COMMA ID 
            {
              List<String> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> id_list = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		id_list.add(id_name);
				RESULT= id_list;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idList ::= ID 
            {
              List<String> RESULT =null;
		int id_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<String> ids=new LinkedList<String>();
				ids.add(id_name);
				RESULT= ids;		
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldList ::= type idList SEMI 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> id_list = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			List<Field> fields=new LinkedList<Field>();
			for(String id: id_list)
			{
				Field f=new Field(t,id);
				fields.add(f);
			}
			RESULT = fields;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fmList ::= 
            {
              FieldMethodList RESULT =null;
		
			   //Epsilon case
			   RESULT = new FieldMethodList(parser.getCurrentLine()); 
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fmList ::= fmList method 
            {
              FieldMethodList RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fm = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//Left recursion Method
				fm.add(m);
				RESULT = fm;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fmList ::= fmList fieldList 
            {
              FieldMethodList RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList fm = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Field> fl = (List<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		       for(Field f:fl)
		       {
		       		fm.add(f);
		       }
			   //Left recursion fieldList
		       RESULT = fm;
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR fmList RCBR 
            {
              ICClass RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList l = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			  		RESULT = new ICClass(clleft, c_name, l.getFieldList(), l.getMethodList());
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR fmList RCBR 
            {
              ICClass RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int super_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int super_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String super_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldMethodList l = (FieldMethodList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			  		RESULT = new ICClass(clleft, c_name,super_name, l.getFieldList(), l.getMethodList()); 			   
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classList ::= 
            {
              List<ICClass> RESULT =null;
		
			   		RESULT = new LinkedList<ICClass>();
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classList ::= classList classDecl 
            {
              List<ICClass> RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ICClass> c_list = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			   		c_list.add(c);
			   		RESULT = c_list;
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classList 
            {
              Program RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> c_list = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Program(c_list);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


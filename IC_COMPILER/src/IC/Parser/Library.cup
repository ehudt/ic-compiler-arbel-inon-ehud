package IC.Parser;

import IC.AST.*;	
import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import IC.DataTypes;
import IC.Parser.Lexer;


parser code  {:
	
	public boolean printTokens;
	
	private Lexer lexer;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getCurrentLine();
	}
	
	public void syntax_error(Symbol s) {
		Token currTok = (Token) s;
		System.out.println("Line " + currTok.getLine()+": Syntax error; unexpected " + currTok);
	}
:};
	
	

scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};

//Terminals
terminal		BOOLEAN, CLASS, COMMA, INT;
terminal 		LB, LCBR, LP, RB, RCBR;
terminal 		RP, SEMI, STATIC, STRING;
terminal 		VOID;
terminal String CLASS_ID, ID;


//Nonterminals
non terminal ICClass libic;
non terminal LibraryMethod libmethod;
non terminal List<Method> libmethod_list;
non terminal Formal formal;
non terminal List<Formal> formal_list;
non terminal Type type;

//Precedences



//The Grammar

libic ::= CLASS:cl CLASS_ID:libname LCBR libmethod_list:lmList RCBR
		{: if (libname.equals("Library")){
			RESULT = new ICClass(clleft, libname, new LinkedList<Field>(), lmList);
		}else{
			throw new SyntaxError(clleft, "Syntax error: library class name must be Library");
			}
			:}
		;
		
libmethod_list ::= libmethod:lm	
		{:	
			List<Method> lmList = new LinkedList<Method>();
			lmList.add(lm);
			RESULT = lmList;
		:}
		| libmethod_list:lmList libmethod:lm
		{:	
			lmList.add(lm);
			RESULT = lmList;
		:}
;
		
libmethod ::= STATIC type:t ID:id LP formal_list:fl RP SEMI
		{: RESULT = new LibraryMethod(t, id, fl); :}
		| STATIC:st VOID ID:id LP formal_list:fl RP SEMI
		{: RESULT = new LibraryMethod(new PrimitiveType(stleft,DataTypes.VOID), id, fl); :} 
;

formal_list ::= 
				{:  List<Formal> fl = new LinkedList<Formal>();
					RESULT = fl; :}
				| formal_list:fl COMMA formal:f
				{:  fl.add(f);
					RESULT = fl; :} 
;					 

formal ::= type:t ID:id
		{: RESULT = new Formal(t, id); :}
;		

type ::= INT:i
		 {:
				RESULT=new PrimitiveType(ileft,DataTypes.INT);
		 :} 
		 | 
		 BOOLEAN:bool
		 {:
				RESULT=new PrimitiveType(boolleft,DataTypes.BOOLEAN);
		 :}  
		 | 
		 STRING:str 
		 {:
				RESULT=new PrimitiveType(strleft,DataTypes.STRING); 
		 :} 
		 | 
		 CLASS_ID:c_name
		 {:
				RESULT=new UserType(c_nameleft, c_name);
		 :}  
		 | 
		 type:t LB RB
		 {:
		 		t.incrementDimension();
				RESULT=t;
		 :}
;

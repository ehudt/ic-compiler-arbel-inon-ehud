
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 30 18:01:43 IST 2012
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import IC.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import IC.Parser.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 30 18:01:43 IST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\003\011\000\002\003\007" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\010\013\000\002\010\013\000\002\010\012\000\002\010" +
    "\012\000\002\013\005\000\002\013\003\000\002\013\002" +
    "\000\002\012\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\011\004\000\002\011\002\000\002\015\006\000\002\015" +
    "\004\000\002\015\005\000\002\015\004\000\002\015\011" +
    "\000\002\015\007\000\002\015\007\000\002\015\004\000" +
    "\002\015\004\000\002\015\005\000\002\015\007\000\002" +
    "\015\005\000\002\017\002\000\002\017\005\000\002\017" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\006\000\002\016\007\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\030\005\000\002\030\005\000\002\031" +
    "\004\000\002\031\004\000\002\021\003\000\002\021\003" +
    "\000\002\022\010\000\002\023\010\000\002\023\006\000" +
    "\002\020\003\000\002\020\005\000\002\020\006\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\027\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\004\007\006\001\002\000\004\002\257\001" +
    "\002\000\006\002\uffff\007\uffff\001\002\000\004\061\011" +
    "\001\002\000\006\002\001\007\006\001\002\000\006\002" +
    "\ufffe\007\ufffe\001\002\000\006\016\012\026\013\001\002" +
    "\000\004\061\253\001\002\000\020\005\ufff9\023\ufff9\045" +
    "\ufff9\051\ufff9\052\ufff9\056\ufff9\061\ufff9\001\002\000\020" +
    "\005\020\023\016\045\025\051\017\052\024\056\021\061" +
    "\023\001\002\000\020\005\ufffa\023\ufffa\045\ufffa\051\ufffa" +
    "\052\ufffa\056\ufffa\061\ufffa\001\002\000\006\025\uffed\062" +
    "\uffed\001\002\000\014\005\020\023\016\052\024\056\234" +
    "\061\023\001\002\000\006\025\uffec\062\uffec\001\002\000" +
    "\004\062\224\001\002\000\020\005\ufffb\023\ufffb\045\ufffb" +
    "\051\ufffb\052\ufffb\056\ufffb\061\ufffb\001\002\000\006\025" +
    "\uffea\062\uffea\001\002\000\006\025\uffeb\062\uffeb\001\002" +
    "\000\006\002\ufffc\007\ufffc\001\002\000\006\025\031\062" +
    "\027\001\002\000\010\010\ufff7\032\036\050\ufff7\001\002" +
    "\000\006\010\033\050\034\001\002\000\004\044\032\001" +
    "\002\000\006\025\uffe9\062\uffe9\001\002\000\004\062\035" +
    "\001\002\000\020\005\ufff8\023\ufff8\045\ufff8\051\ufff8\052" +
    "\ufff8\056\ufff8\061\ufff8\001\002\000\006\010\ufff6\050\ufff6" +
    "\001\002\000\016\005\020\010\uffef\023\016\047\uffef\052" +
    "\024\061\023\001\002\000\006\010\043\047\044\001\002" +
    "\000\006\025\031\062\042\001\002\000\006\010\ufff0\047" +
    "\ufff0\001\002\000\006\010\uffee\047\uffee\001\002\000\012" +
    "\005\020\023\016\052\024\061\023\001\002\000\004\026" +
    "\045\001\002\000\056\005\uffe7\006\uffe7\011\uffe7\017\uffe7" +
    "\022\uffe7\023\uffe7\026\uffe7\030\uffe7\032\uffe7\041\uffe7\042" +
    "\uffe7\045\uffe7\046\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000" +
    "\056\005\020\006\071\011\050\017\072\022\062\023\016" +
    "\026\051\030\065\032\053\041\076\042\102\045\104\046" +
    "\056\052\024\053\064\054\060\055\105\057\055\060\077" +
    "\061\101\062\063\063\066\001\002\000\042\004\220\012" +
    "\uffd7\013\uffd7\015\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\043\uffd7\001\002\000\004\050\217\001\002\000\056" +
    "\005\uffe7\006\uffe7\011\uffe7\017\uffe7\022\uffe7\023\uffe7\026" +
    "\uffe7\030\uffe7\032\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\001\002\000\040\012\123\013\136" +
    "\015\132\020\135\021\124\024\125\025\140\031\134\033" +
    "\141\034\130\035\122\036\127\037\126\040\131\043\133" +
    "\001\002\000\032\017\072\030\065\032\053\041\076\042" +
    "\102\053\064\054\060\055\105\060\077\061\115\062\063" +
    "\063\066\001\002\000\006\025\031\062\206\001\002\000" +
    "\004\032\202\001\002\000\034\017\072\030\065\032\053" +
    "\041\076\042\102\050\200\053\064\054\060\055\105\060" +
    "\077\061\115\062\063\063\066\001\002\000\050\010\uffc8" +
    "\012\uffc8\013\uffc8\015\uffc8\020\uffc8\021\uffc8\024\uffc8\025" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\043\uffc8\044\uffc8\047\uffc8\050\uffc8\001\002\000" +
    "\050\010\uffb0\012\uffb0\013\uffb0\015\uffb0\020\uffb0\021\uffb0" +
    "\024\uffb0\025\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\047\uffb0\050\uffb0" +
    "\001\002\000\050\010\uffc9\012\uffc9\013\uffc9\015\uffc9\020" +
    "\uffc9\021\uffc9\024\uffc9\025\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\043\uffc9\044\uffc9\047" +
    "\uffc9\050\uffc9\001\002\000\004\032\171\001\002\000\054" +
    "\004\uffc4\010\uffc4\012\uffc4\013\uffc4\015\uffc4\020\uffc4\021" +
    "\uffc4\024\uffc4\025\uffc4\031\uffc4\032\166\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\043\uffc4\044\uffc4\047" +
    "\uffc4\050\uffc4\001\002\000\050\010\uffd5\012\uffd5\013\uffd5" +
    "\015\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\031\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043\uffd5" +
    "\044\uffd5\047\uffd5\050\uffd5\001\002\000\032\017\uffb3\030" +
    "\uffb3\032\uffb3\041\uffb3\042\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\001\002\000\050\010" +
    "\uffb1\012\uffb1\013\uffb1\015\uffb1\020\uffb1\021\uffb1\024\uffb1" +
    "\025\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\043\uffb1\044\uffb1\047\uffb1\050\uffb1\001\002" +
    "\000\032\017\072\030\065\032\053\041\076\042\102\053" +
    "\064\054\060\055\105\060\077\061\115\062\063\063\066" +
    "\001\002\000\050\010\uffd0\012\uffd0\013\uffd0\015\uffd0\020" +
    "\uffd0\021\uffd0\024\uffd0\025\uffd0\031\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\044\uffd0\047" +
    "\uffd0\050\uffd0\001\002\000\004\050\164\001\002\000\050" +
    "\010\uffaf\012\uffaf\013\uffaf\015\uffaf\020\uffaf\021\uffaf\024" +
    "\uffaf\025\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\043\uffaf\044\uffaf\047\uffaf\050\uffaf\001" +
    "\002\000\032\017\072\030\065\032\053\041\076\042\102" +
    "\053\064\054\060\055\105\060\077\061\115\062\063\063" +
    "\066\001\002\000\050\010\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\020\uffcf\021\uffcf\024\uffcf\025\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\044\uffcf" +
    "\047\uffcf\050\uffcf\001\002\000\050\010\uffd1\012\uffd1\013" +
    "\uffd1\015\uffd1\020\uffd1\021\uffd1\024\uffd1\025\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\043" +
    "\uffd1\044\uffd1\047\uffd1\050\uffd1\001\002\000\012\005\020" +
    "\023\016\052\024\061\154\001\002\000\050\010\uffb2\012" +
    "\uffb2\013\uffb2\015\uffb2\020\uffb2\021\uffb2\024\uffb2\025\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\043\uffb2\044\uffb2\047\uffb2\050\uffb2\001\002\000\042" +
    "\012\uffd6\013\uffd6\015\uffd6\020\uffd6\021\uffd6\024\uffd6\025" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\043\uffd6\050\153\001\002\000\010\013\106\025" +
    "\uffea\062\uffea\001\002\000\050\010\uffae\012\uffae\013\uffae" +
    "\015\uffae\020\uffae\021\uffae\024\uffae\025\uffae\031\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\043\uffae" +
    "\044\uffae\047\uffae\050\uffae\001\002\000\056\005\uffe8\006" +
    "\uffe8\011\uffe8\017\uffe8\022\uffe8\023\uffe8\026\uffe8\030\uffe8" +
    "\032\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\001\002\000\020\005\ufff3\023\ufff3\045\ufff3\051" +
    "\ufff3\052\ufff3\056\ufff3\061\ufff3\001\002\000\032\017\uffb4" +
    "\030\uffb4\032\uffb4\041\uffb4\042\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000\004" +
    "\062\107\001\002\000\004\032\110\001\002\000\036\010" +
    "\uffda\017\072\030\065\032\053\041\076\042\102\047\uffda" +
    "\053\064\054\060\055\105\060\077\061\115\062\063\063" +
    "\066\001\002\000\050\010\uffd7\012\uffd7\013\uffd7\015\uffd7" +
    "\020\uffd7\021\uffd7\024\uffd7\025\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\044\uffd7" +
    "\047\uffd7\050\uffd7\001\002\000\044\010\uffd8\012\123\013" +
    "\136\015\132\020\135\021\124\024\125\025\140\031\134" +
    "\033\141\034\130\035\122\036\127\037\126\040\131\043" +
    "\133\047\uffd8\001\002\000\006\010\116\047\117\001\002" +
    "\000\050\010\uffd6\012\uffd6\013\uffd6\015\uffd6\020\uffd6\021" +
    "\uffd6\024\uffd6\025\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\043\uffd6\044\uffd6\047\uffd6\050" +
    "\uffd6\001\002\000\004\013\106\001\002\000\032\017\072" +
    "\030\065\032\053\041\076\042\102\053\064\054\060\055" +
    "\105\060\077\061\115\062\063\063\066\001\002\000\050" +
    "\010\uffc7\012\uffc7\013\uffc7\015\uffc7\020\uffc7\021\uffc7\024" +
    "\uffc7\025\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\043\uffc7\044\uffc7\047\uffc7\050\uffc7\001" +
    "\002\000\044\010\uffd9\012\123\013\136\015\132\020\135" +
    "\021\124\024\125\025\140\031\134\033\141\034\130\035" +
    "\122\036\127\037\126\040\131\043\133\047\uffd9\001\002" +
    "\000\032\017\072\030\065\032\053\041\076\042\102\053" +
    "\064\054\060\055\105\060\077\061\115\062\063\063\066" +
    "\001\002\000\032\017\uffc0\030\uffc0\032\uffc0\041\uffc0\042" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\001\002\000\032\017\uffbe\030\uffbe\032\uffbe\041" +
    "\uffbe\042\uffbe\053\uffbe\054\uffbe\055\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\001\002\000\032\017\uffb7\030\uffb7\032" +
    "\uffb7\041\uffb7\042\uffb7\053\uffb7\054\uffb7\055\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\001\002\000\032\017\uffbc\030" +
    "\uffbc\032\uffbc\041\uffbc\042\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\032\017" +
    "\uffbf\030\uffbf\032\uffbf\041\uffbf\042\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\032\017\uffbd\030\uffbd\032\uffbd\041\uffbd\042\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\001" +
    "\002\000\032\017\uffb9\030\uffb9\032\uffb9\041\uffb9\042\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\001\002\000\032\017\uffb5\030\uffb5\032\uffb5\041\uffb5" +
    "\042\uffb5\053\uffb5\054\uffb5\055\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\001\002\000\032\017\uffb6\030\uffb6\032\uffb6" +
    "\041\uffb6\042\uffb6\053\uffb6\054\uffb6\055\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\001\002\000\032\017\uffc1\030\uffc1" +
    "\032\uffc1\041\uffc1\042\uffc1\053\uffc1\054\uffc1\055\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\032\017\uffbb" +
    "\030\uffbb\032\uffbb\041\uffbb\042\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001\002\000\032" +
    "\017\uffb8\030\uffb8\032\uffb8\041\uffb8\042\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\001\002" +
    "\000\006\027\146\062\145\001\002\000\032\017\072\030" +
    "\065\032\053\041\076\042\102\053\064\054\060\055\105" +
    "\060\077\061\115\062\063\063\066\001\002\000\032\017" +
    "\072\030\065\032\053\041\076\042\102\053\064\054\060" +
    "\055\105\060\077\061\115\062\063\063\066\001\002\000" +
    "\032\017\uffba\030\uffba\032\uffba\041\uffba\042\uffba\053\uffba" +
    "\054\uffba\055\uffba\060\uffba\061\uffba\062\uffba\063\uffba\001" +
    "\002\000\042\012\123\013\136\015\132\020\135\021\124" +
    "\024\125\025\140\031\134\033\141\034\130\035\122\036" +
    "\127\037\126\040\131\043\133\044\143\001\002\000\052" +
    "\004\uffc2\010\uffc2\012\uffc2\013\uffc2\015\uffc2\020\uffc2\021" +
    "\uffc2\024\uffc2\025\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\043\uffc2\044\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\050\010\uffcc\012\123\013\136\015\132" +
    "\020\135\021\124\024\125\025\140\031\134\033\141\034" +
    "\130\035\122\036\127\037\126\040\131\043\133\044\uffcc" +
    "\047\uffcc\050\uffcc\001\002\000\054\004\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\020\uffc3\021\uffc3\024\uffc3\025\uffc3" +
    "\031\uffc3\032\147\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3\001\002" +
    "\000\050\010\uffd2\012\uffd2\013\uffd2\015\uffd2\020\uffd2\021" +
    "\uffd2\024\uffd2\025\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\047\uffd2\050" +
    "\uffd2\001\002\000\036\010\uffda\017\072\030\065\032\053" +
    "\041\076\042\102\047\uffda\053\064\054\060\055\105\060" +
    "\077\061\115\062\063\063\066\001\002\000\006\010\116" +
    "\047\151\001\002\000\050\010\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\031\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\043\uffc6\044" +
    "\uffc6\047\uffc6\050\uffc6\001\002\000\050\010\uffcd\012\123" +
    "\013\136\015\132\020\135\021\124\024\125\025\140\031" +
    "\134\033\141\034\130\035\122\036\127\037\126\040\131" +
    "\043\133\044\uffcd\047\uffcd\050\uffcd\001\002\000\060\005" +
    "\uffe5\006\uffe5\011\uffe5\014\uffe5\017\uffe5\022\uffe5\023\uffe5" +
    "\026\uffe5\030\uffe5\032\uffe5\041\uffe5\042\uffe5\045\uffe5\046" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\001\002\000\006\025\uffea\032" +
    "\161\001\002\000\004\025\156\001\002\000\034\017\072" +
    "\030\065\032\053\041\076\042\102\044\032\053\064\054" +
    "\060\055\105\060\077\061\115\062\063\063\066\001\002" +
    "\000\042\012\123\013\136\015\132\020\135\021\124\024" +
    "\125\025\140\031\134\033\141\034\130\035\122\036\127" +
    "\037\126\040\131\043\133\044\160\001\002\000\050\010" +
    "\uffd3\012\uffd3\013\uffd3\015\uffd3\020\uffd3\021\uffd3\024\uffd3" +
    "\025\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\044\uffd3\047\uffd3\050\uffd3\001\002" +
    "\000\004\047\162\001\002\000\050\010\uffd4\012\uffd4\013" +
    "\uffd4\015\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\031\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043" +
    "\uffd4\044\uffd4\047\uffd4\050\uffd4\001\002\000\050\010\uffca" +
    "\012\123\013\136\015\132\020\135\021\124\024\125\025" +
    "\140\031\134\033\141\034\130\035\122\036\127\037\126" +
    "\040\131\043\133\044\uffca\047\uffca\050\uffca\001\002\000" +
    "\060\005\uffdf\006\uffdf\011\uffdf\014\uffdf\017\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\030\uffdf\032\uffdf\041\uffdf\042\uffdf\045" +
    "\uffdf\046\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\050\010" +
    "\uffcb\012\123\013\136\015\132\020\135\021\124\024\125" +
    "\025\140\031\134\033\141\034\130\035\122\036\127\037" +
    "\126\040\131\043\133\044\uffcb\047\uffcb\050\uffcb\001\002" +
    "\000\036\010\uffda\017\072\030\065\032\053\041\076\042" +
    "\102\047\uffda\053\064\054\060\055\105\060\077\061\115" +
    "\062\063\063\066\001\002\000\006\010\116\047\170\001" +
    "\002\000\050\010\uffc5\012\uffc5\013\uffc5\015\uffc5\020\uffc5" +
    "\021\uffc5\024\uffc5\025\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\044\uffc5\047\uffc5" +
    "\050\uffc5\001\002\000\032\017\072\030\065\032\053\041" +
    "\076\042\102\053\064\054\060\055\105\060\077\061\115" +
    "\062\063\063\066\001\002\000\042\012\123\013\136\015" +
    "\132\020\135\021\124\024\125\025\140\031\134\033\141" +
    "\034\130\035\122\036\127\037\126\040\131\043\133\047" +
    "\173\001\002\000\054\005\020\006\071\011\050\017\072" +
    "\022\062\023\016\026\051\030\065\032\053\041\076\042" +
    "\102\046\056\052\024\053\064\054\060\055\105\057\055" +
    "\060\077\061\101\062\063\063\066\001\002\000\060\005" +
    "\uffe1\006\uffe1\011\uffe1\014\175\017\uffe1\022\uffe1\023\uffe1" +
    "\026\uffe1\030\uffe1\032\uffe1\041\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\001\002\000\054\005\020\006" +
    "\071\011\050\017\072\022\062\023\016\026\051\030\065" +
    "\032\053\041\076\042\102\046\056\052\024\053\064\054" +
    "\060\055\105\057\055\060\077\061\101\062\063\063\066" +
    "\001\002\000\060\005\uffe2\006\uffe2\011\uffe2\014\uffe2\017" +
    "\uffe2\022\uffe2\023\uffe2\026\uffe2\030\uffe2\032\uffe2\041\uffe2" +
    "\042\uffe2\045\uffe2\046\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\042\012\123\013\136\015\132\020\135\021\124\024" +
    "\125\025\140\031\134\033\141\034\130\035\122\036\127" +
    "\037\126\040\131\043\133\050\201\001\002\000\060\005" +
    "\uffe3\006\uffe3\011\uffe3\014\uffe3\017\uffe3\022\uffe3\023\uffe3" +
    "\026\uffe3\030\uffe3\032\uffe3\041\uffe3\042\uffe3\045\uffe3\046" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\001\002\000\060\005\uffe4\006" +
    "\uffe4\011\uffe4\014\uffe4\017\uffe4\022\uffe4\023\uffe4\026\uffe4" +
    "\030\uffe4\032\uffe4\041\uffe4\042\uffe4\045\uffe4\046\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\001\002\000\032\017\072\030\065\032" +
    "\053\041\076\042\102\053\064\054\060\055\105\060\077" +
    "\061\115\062\063\063\066\001\002\000\042\012\123\013" +
    "\136\015\132\020\135\021\124\024\125\025\140\031\134" +
    "\033\141\034\130\035\122\036\127\037\126\040\131\043" +
    "\133\047\204\001\002\000\054\005\020\006\071\011\050" +
    "\017\072\022\062\023\016\026\051\030\065\032\053\041" +
    "\076\042\102\046\056\052\024\053\064\054\060\055\105" +
    "\057\055\060\077\061\101\062\063\063\066\001\002\000" +
    "\060\005\uffe0\006\uffe0\011\uffe0\014\uffe0\017\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\030\uffe0\032\uffe0\041\uffe0\042\uffe0\045" +
    "\uffe0\046\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000\006\004" +
    "\210\050\207\001\002\000\060\005\uffdb\006\uffdb\011\uffdb" +
    "\014\uffdb\017\uffdb\022\uffdb\023\uffdb\026\uffdb\030\uffdb\032" +
    "\uffdb\041\uffdb\042\uffdb\045\uffdb\046\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\001\002\000\032\017\072\030\065\032\053\041\076" +
    "\042\102\053\064\054\060\055\105\060\077\061\115\062" +
    "\063\063\066\001\002\000\042\012\123\013\136\015\132" +
    "\020\135\021\124\024\125\025\140\031\134\033\141\034" +
    "\130\035\122\036\127\037\126\040\131\043\133\050\212" +
    "\001\002\000\060\005\uffdc\006\uffdc\011\uffdc\014\uffdc\017" +
    "\uffdc\022\uffdc\023\uffdc\026\uffdc\030\uffdc\032\uffdc\041\uffdc" +
    "\042\uffdc\045\uffdc\046\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002" +
    "\000\042\012\123\013\136\015\132\020\135\021\124\024" +
    "\125\025\140\031\134\033\141\034\130\035\122\036\127" +
    "\037\126\040\131\043\133\047\214\001\002\000\050\010" +
    "\uffce\012\uffce\013\uffce\015\uffce\020\uffce\021\uffce\024\uffce" +
    "\025\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\043\uffce\044\uffce\047\uffce\050\uffce\001\002" +
    "\000\056\005\020\006\071\011\050\017\072\022\062\023" +
    "\016\026\051\030\065\032\053\041\076\042\102\045\216" +
    "\046\056\052\024\053\064\054\060\055\105\057\055\060" +
    "\077\061\101\062\063\063\066\001\002\000\060\005\uffdd" +
    "\006\uffdd\011\uffdd\014\uffdd\017\uffdd\022\uffdd\023\uffdd\026" +
    "\uffdd\030\uffdd\032\uffdd\041\uffdd\042\uffdd\045\uffdd\046\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\001\002\000\060\005\uffde\006\uffde" +
    "\011\uffde\014\uffde\017\uffde\022\uffde\023\uffde\026\uffde\030" +
    "\uffde\032\uffde\041\uffde\042\uffde\045\uffde\046\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\001\002\000\032\017\072\030\065\032\053" +
    "\041\076\042\102\053\064\054\060\055\105\060\077\061" +
    "\115\062\063\063\066\001\002\000\042\012\123\013\136" +
    "\015\132\020\135\021\124\024\125\025\140\031\134\033" +
    "\141\034\130\035\122\036\127\037\126\040\131\043\133" +
    "\050\222\001\002\000\060\005\uffe6\006\uffe6\011\uffe6\014" +
    "\uffe6\017\uffe6\022\uffe6\023\uffe6\026\uffe6\030\uffe6\032\uffe6" +
    "\041\uffe6\042\uffe6\045\uffe6\046\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\001\002\000\006\010\ufff1\047\ufff1\001\002\000\004\032" +
    "\225\001\002\000\016\005\020\010\uffef\023\016\047\uffef" +
    "\052\024\061\023\001\002\000\006\010\043\047\227\001" +
    "\002\000\004\026\230\001\002\000\056\005\uffe7\006\uffe7" +
    "\011\uffe7\017\uffe7\022\uffe7\023\uffe7\026\uffe7\030\uffe7\032" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\056\005\020\006\071\011\050\017\072" +
    "\022\062\023\016\026\051\030\065\032\053\041\076\042" +
    "\102\045\232\046\056\052\024\053\064\054\060\055\105" +
    "\057\055\060\077\061\101\062\063\063\066\001\002\000" +
    "\020\005\ufff2\023\ufff2\045\ufff2\051\ufff2\052\ufff2\056\ufff2" +
    "\061\ufff2\001\002\000\006\025\031\062\244\001\002\000" +
    "\004\062\235\001\002\000\004\032\236\001\002\000\016" +
    "\005\020\010\uffef\023\016\047\uffef\052\024\061\023\001" +
    "\002\000\006\010\043\047\240\001\002\000\004\026\241" +
    "\001\002\000\056\005\uffe7\006\uffe7\011\uffe7\017\uffe7\022" +
    "\uffe7\023\uffe7\026\uffe7\030\uffe7\032\uffe7\041\uffe7\042\uffe7" +
    "\045\uffe7\046\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\056" +
    "\005\020\006\071\011\050\017\072\022\062\023\016\026" +
    "\051\030\065\032\053\041\076\042\102\045\243\046\056" +
    "\052\024\053\064\054\060\055\105\057\055\060\077\061" +
    "\101\062\063\063\066\001\002\000\020\005\ufff4\023\ufff4" +
    "\045\ufff4\051\ufff4\052\ufff4\056\ufff4\061\ufff4\001\002\000" +
    "\004\032\245\001\002\000\016\005\020\010\uffef\023\016" +
    "\047\uffef\052\024\061\023\001\002\000\006\010\043\047" +
    "\247\001\002\000\004\026\250\001\002\000\056\005\uffe7" +
    "\006\uffe7\011\uffe7\017\uffe7\022\uffe7\023\uffe7\026\uffe7\030" +
    "\uffe7\032\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\001\002\000\056\005\020\006\071\011\050" +
    "\017\072\022\062\023\016\026\051\030\065\032\053\041" +
    "\076\042\102\045\252\046\056\052\024\053\064\054\060" +
    "\055\105\057\055\060\077\061\101\062\063\063\066\001" +
    "\002\000\020\005\ufff5\023\ufff5\045\ufff5\051\ufff5\052\ufff5" +
    "\056\ufff5\061\ufff5\001\002\000\004\026\254\001\002\000" +
    "\020\005\ufff9\023\ufff9\045\ufff9\051\ufff9\052\ufff9\056\ufff9" +
    "\061\ufff9\001\002\000\020\005\020\023\016\045\256\051" +
    "\017\052\024\056\021\061\023\001\002\000\006\002\ufffd" +
    "\007\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\013\001\001\000\010\006\021" +
    "\010\014\014\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\040\013\036\014\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\222\014\037\001\001\000\002\001\001\000" +
    "\004\011\045\001\001\000\032\014\053\015\102\016\051" +
    "\020\046\021\077\022\060\023\056\026\066\027\072\030" +
    "\074\031\067\032\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\214\001\001\000\006\024\120\025" +
    "\136\001\001\000\026\016\212\020\110\021\113\022\060" +
    "\023\056\026\066\027\072\030\074\031\067\032\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\176" +
    "\020\110\021\113\022\060\023\056\026\066\027\072\030" +
    "\074\031\067\032\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\164\020\110\021\113\022\060\023\056\026" +
    "\066\027\072\030\074\031\067\032\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\162\020\110\021\113\022\060\023\056\026\066\027\072" +
    "\030\074\031\067\032\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\016\111\017\112\020" +
    "\110\021\113\022\060\023\056\026\066\027\072\030\074" +
    "\031\067\032\073\001\001\000\002\001\001\000\006\024" +
    "\120\025\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\117\020\110\021\113\022" +
    "\060\023\056\026\066\027\072\030\074\031\067\032\073" +
    "\001\001\000\002\001\001\000\006\024\120\025\136\001" +
    "\001\000\026\016\151\020\110\021\113\022\060\023\056" +
    "\026\066\027\072\030\074\031\067\032\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\143\020\110\021\113\022\060\023\056\026\066" +
    "\027\072\030\074\031\067\032\073\001\001\000\026\016" +
    "\141\020\110\021\113\022\060\023\056\026\066\027\072" +
    "\030\074\031\067\032\073\001\001\000\002\001\001\000" +
    "\006\024\120\025\136\001\001\000\002\001\001\000\006" +
    "\024\120\025\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\016\111\017\147\020\110\021\113\022\060" +
    "\023\056\026\066\027\072\030\074\031\067\032\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\120" +
    "\025\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\156\020\110\021\113\022\060" +
    "\023\056\026\066\027\072\030\074\031\067\032\073\001" +
    "\001\000\006\024\120\025\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\120\025" +
    "\136\001\001\000\002\001\001\000\006\024\120\025\136" +
    "\001\001\000\030\016\111\017\166\020\110\021\113\022" +
    "\060\023\056\026\066\027\072\030\074\031\067\032\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\171\020\110\021\113\022\060\023\056\026\066\027\072" +
    "\030\074\031\067\032\073\001\001\000\006\024\120\025" +
    "\136\001\001\000\032\014\053\015\173\016\051\020\046" +
    "\021\077\022\060\023\056\026\066\027\072\030\074\031" +
    "\067\032\073\001\001\000\002\001\001\000\032\014\053" +
    "\015\175\016\051\020\046\021\077\022\060\023\056\026" +
    "\066\027\072\030\074\031\067\032\073\001\001\000\002" +
    "\001\001\000\006\024\120\025\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\202\020\110\021\113" +
    "\022\060\023\056\026\066\027\072\030\074\031\067\032" +
    "\073\001\001\000\006\024\120\025\136\001\001\000\032" +
    "\014\053\015\204\016\051\020\046\021\077\022\060\023" +
    "\056\026\066\027\072\030\074\031\067\032\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\016\210\020\110\021\113\022\060\023\056\026\066" +
    "\027\072\030\074\031\067\032\073\001\001\000\006\024" +
    "\120\025\136\001\001\000\002\001\001\000\006\024\120" +
    "\025\136\001\001\000\002\001\001\000\032\014\053\015" +
    "\102\016\051\020\046\021\077\022\060\023\056\026\066" +
    "\027\072\030\074\031\067\032\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\220\020\110\021\113" +
    "\022\060\023\056\026\066\027\072\030\074\031\067\032" +
    "\073\001\001\000\006\024\120\025\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\040\013\225\014\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\230\001\001\000\032\014\053\015" +
    "\102\016\051\020\046\021\077\022\060\023\056\026\066" +
    "\027\072\030\074\031\067\032\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\040\013\236\014\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\241\001\001\000\032" +
    "\014\053\015\102\016\051\020\046\021\077\022\060\023" +
    "\056\026\066\027\072\030\074\031\067\032\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\040\013" +
    "\245\014\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\250\001\001\000\032\014\053\015\102\016" +
    "\051\020\046\021\077\022\060\023\056\026\066\027\072" +
    "\030\074\031\067\032\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\254\001\001\000\010\006\021" +
    "\010\014\014\025\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	private Lexer lexer;

	public parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	} 
	
	public int getCurrentLine() {
		return this.lexer.getCurrentLine();
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= NULL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Literal(rleft, LiteralTypes.NULL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= FALSE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Literal(bleft, LiteralTypes.FALSE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= TRUE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Literal(bleft, LiteralTypes.TRUE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= QUOTE 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Literal(sleft, LiteralTypes.STRING, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  long num_val = Long.parseLong(n);
				if (num_val > 2147483648L){
					throw new SyntaxError(nleft, "Integer literal out of range: " + n);
				}
				RESULT = new Literal(nleft, LiteralTypes.INTEGER, (int)num_val); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logicalUnOp ::= LNEG 
            {
              UnaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = UnaryOps.LNEG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalUnOp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // mathUnOp ::= UMINUS 
            {
              UnaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = UnaryOps.UMINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathUnOp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logicalBinOp ::= NEQUAL 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.NEQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logicalBinOp ::= EQUAL 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.EQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logicalBinOp ::= GTE 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.GTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logicalBinOp ::= GT 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.GT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logicalBinOp ::= LTE 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.LTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logicalBinOp ::= LT 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.LT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logicalBinOp ::= LOR 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.LOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logicalBinOp ::= LAND 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.LAND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalBinOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mathBinOp ::= MOD 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathBinOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mathBinOp ::= DIVIDE 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.DIVIDE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathBinOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // mathBinOp ::= MULTIPLY 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.MULTIPLY; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathBinOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mathBinOp ::= MINUS 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathBinOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mathBinOp ::= PLUS 
            {
              BinaryOps RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = BinaryOps.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathBinOp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // location ::= expr LB expr RB 
            {
              Location RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLocation(arr, index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // location ::= expr DOT ID 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(eleft, e, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // location ::= ID 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(idleft, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // virtualCall ::= ID LP exprList RP 
            {
              VirtualCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(idleft, id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // virtualCall ::= expr DOT ID LP exprList RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(eleft, e, id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // staticCall ::= CLASS_ID DOT ID LP exprList RP 
            {
              StaticCall RESULT =null;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticCall(classIdleft, classId, id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticCall",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // call ::= virtualCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VirtualCall c = (VirtualCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // call ::= staticCall 
            {
              Call RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StaticCall c = (StaticCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unExpr ::= logicalUnOp expr 
            {
              UnaryOp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOps op = (UnaryOps)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(op, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unExpr ::= mathUnOp expr 
            {
              UnaryOp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOps op = (UnaryOps)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(op, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binExpr ::= expr logicalBinOp expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOps op = (BinaryOps)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binExpr ::= expr mathBinOp expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOps op = (BinaryOps)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LP expr RP 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= unExpr 
            {
              Expression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryOp ue = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= binExpr 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinaryOp be = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEW type LB expr RB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewClass(nleft, classId); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprList ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expression> el = new LinkedList<Expression>();
				   el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprList ::= exprList COMMA expr 
            {
              List<Expression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprList ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= type ID SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new LocalVariable(t, id);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= type ID ASSIGN expr SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT = new LocalVariable(t, id, e); 
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= LCBR stmtList RCBR 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT = new StatementsBlock(lbleft,sl);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT = new Continue(cleft);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= BREAK SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT = new Break(bleft);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= WHILE LP expr RP stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	RESULT = new While(e,st);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LP expr RP stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	RESULT = new If(e, st);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s_elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s_elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s_else = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	RESULT = new If(e, st, s_else);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= RETURN SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT= new Return(rleft);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT= new Return(rleft,e);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= call SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	RESULT = new CallStatement(c);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= location ASSIGN expr SEMI 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	     	RESULT = new Assignment(l,e);
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtList ::= 
            {
              List<Statement> RESULT =null;
		
		      		RESULT = new LinkedList<Statement>();
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= stmtList stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		     	 	sl.add(s);
					RESULT=sl;
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		 		t.incrementDimension();
				RESULT=t;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new UserType(c_nameleft, c_name);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= STRING 
            {
              Type RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(strleft,DataTypes.STRING); 
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(boolleft,DataTypes.BOOLEAN);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new PrimitiveType(ileft,DataTypes.INT);
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int formal_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formal_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String formal_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=new Formal(t,formal_name);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formalList ::= 
            {
              List<Formal> RESULT =null;
		
			   RESULT = new LinkedList<Formal>();
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formalList ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			   List<Formal> fl=new LinkedList<Formal>();
			   fl.add(f);
			   RESULT = fl;
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalList ::= formalList COMMA formal 
            {
              List<Formal> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			   fl.add(f);
			   RESULT = fl;
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=new VirtualMethod(new PrimitiveType(vleft, DataTypes.VOID), met_name, fl, sl);
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT=new VirtualMethod(t, met_name, fl, sl);
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= STATIC VOID ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT= new StaticMethod(new PrimitiveType(stleft, DataTypes.VOID) ,met_name, fl, sl);
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= STATIC type ID LP formalList RP LCBR stmtList RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int met_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int met_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String met_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT= new StaticMethod(t, met_name, fl, sl);
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idList ::= idList COMMA ID 
            {
              List<String> RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> id_list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		   		id_list.add(id_name);
				RESULT= id_list;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idList ::= ID 
            {
              List<String> RESULT =null;
		int id_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				List<String> ids=new LinkedList<String>();
				ids.add(id_name);
				RESULT= ids;		
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldList ::= type idList SEMI 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> id_list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			List<Field> fields=new LinkedList<Field>();
			for(String id: id_list)
			{
				Field f=new Field(t,id);
				fields.add(f);
			}
			RESULT = fields;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fmList ::= 
            {
              FieldMethodList RESULT =null;
		
			   //Epsilon case
			   RESULT = new FieldMethodList(parser.getCurrentLine()); 
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fmList ::= fmList method 
            {
              FieldMethodList RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldMethodList fm = (FieldMethodList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//Left recursion Method
				fm.add(m);
				RESULT = fm;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fmList ::= fmList fieldList 
            {
              FieldMethodList RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldMethodList fm = (FieldMethodList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Field> fl = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		       for(Field f:fl)
		       {
		       		fm.add(f);
		       }
			   //Left recursion fieldList
		       RESULT = fm;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS CLASS_ID LCBR fmList RCBR 
            {
              ICClass RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldMethodList l = (FieldMethodList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			  		RESULT = new ICClass(clleft, c_name, l.getFieldList(), l.getMethodList());
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR fmList RCBR 
            {
              ICClass RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int c_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int c_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int super_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int super_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String super_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldMethodList l = (FieldMethodList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			  		RESULT = new ICClass(clleft, c_name,super_name, l.getFieldList(), l.getMethodList()); 			   
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classList ::= classList classDecl 
            {
              List<ICClass> RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ICClass> c_list = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   		c_list.add(c);
			   		RESULT = c_list;
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classList ::= classDecl 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			   		RESULT = new LinkedList<ICClass>();
			   		RESULT.add(c);
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classList 
            {
              Program RESULT =null;
		int c_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ICClass> c_list = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = new Program(c_list);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

